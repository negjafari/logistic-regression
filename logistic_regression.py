# -*- coding: utf-8 -*-
"""logistic regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rXYA2Ueddu3fh4y5TXucHxm5n64-9cQA

Import essential libraries
"""

from google.colab import drive
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

drive.mount('/content/drive')

dataset_path1 = '/content/drive/MyDrive/logistic regression dataset/breast_cancer_modified.csv'
df1 = pd.read_csv(dataset_path1)

dataset_path2 = '/content/drive/MyDrive/logistic regression dataset/ionosphere_modified.csv'
df2 = pd.read_csv(dataset_path2)

"""# Dataset Analysis"""

pd.set_option('display.max_columns', None)  # Set to None to display all columns

def analyzeDataset(df):
    missing_values = df.isnull().sum()
    fig, ax = plt.subplots(figsize=(12, 6))
    missing_values.plot.bar(ax=ax)
    for i, val in enumerate(missing_values):
        ax.text(i, val + 10, str(val), ha='center', fontweight='bold')

    plt.show()

analyzeDataset(df1)

analyzeDataset(df2)

df1.describe()

df2.describe()

# Distribution of classes
print(df1['Diagnosis'].value_counts())
print(df2['Label'].value_counts())

# Class distribution for Breast Cancer dataset
sns.countplot(x='Diagnosis', data=df1)
plt.title('Distribution of Classes in Breast Cancer Dataset')
plt.show()

# Class distribution for Ionosphere dataset
sns.countplot(x='Label', data=df2)
plt.title('Distribution of Classes in Ionosphere Dataset')
plt.show()

# Feature distributions in Breast Cancer dataset
features_bc = df1.columns[1:]
for feature in features_bc:
    sns.histplot(df1[feature], kde=True)
    plt.title(f'Distribution of {feature} - Breast Cancer')
    plt.show()

# Feature distributions in Ionosphere dataset
features_io = df2.columns[:]
for feature in features_io:
    sns.histplot(df2[feature], kde=True)
    plt.title(f'Distribution of {feature} - Ionosphere')
    plt.show()

df1 = df1.drop(columns=['ID'])

def visualize_correlation_matrix(df, title):
    corr_matrix = df.corr()
    # Mask to hide upper triangle
    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))

    # Setting up the matplotlib figure
    f, ax = plt.subplots(figsize=(11, 9))

    # Generating a custom diverging colormap
    cmap = sns.diverging_palette(230, 20, as_cmap=True)

    # Draw the heatmap with the mask and correct aspect ratio
    sns.heatmap(corr_matrix, mask=mask, cmap=cmap, vmin=-1, vmax=1, center=0,
                square=True, linewidths=.5, cbar_kws={"shrink": .5},
                annot=False)  # Annotations are turned off for clarity
    plt.title(title)
    plt.show()

visualize_correlation_matrix(df1, 'Full Correlation Matrix for Breast Cancer Dataset')

visualize_correlation_matrix(df2, 'Full Correlation Matrix for Ionosphere Dataset')

"""# Preprocessing

Encode categorical variables
"""

df1['Diagnosis'] = df1['Diagnosis'].map({'B': 1, 'M': 0})
df2['Label'] = df2['Label'].map({'g': 1, 'b': 0})

